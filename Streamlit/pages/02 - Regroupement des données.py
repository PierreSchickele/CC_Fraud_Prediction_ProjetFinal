import joblib
import streamlit as st
import pandas as pd
import pydeck as pdk
import hdbscan

## CONFIG (Call this only once at the beginning)
st.set_page_config(
    page_title="Clustering",
    page_icon="üó∫Ô∏è",
    layout="centered"
)

# PAGE CLUSTERING
# Sidebar section for clustering model
st.markdown("""
    Le but du mod√®le pr√©sent √©tait de regrouper les transactions selons leur positionnement g√©ographique via un mod√®le HDBSCAN.
    Par la suite, nous avons regard√© le pourcentage de transactions frauduleuses parmis les clusters.
    Nous sommes donc arriv√©s sur un mod√®le qui pouvait regroup√© les fraudes par clusters avec une pr√©cision de 55,65 %
""")

st.title('Clustering des transactions (HDBSCAN)')

st.sidebar.header("Mod√®le de clustering")
st.sidebar.write("Cette section affiche les r√©sultats du mod√®le de clustering HDBSCAN.")
st.sidebar.markdown("---")

# Chargement des datas et mod√®le
data = joblib.load('data.joblib')
model = joblib.load('hdb.joblib')
base_data = joblib.load('base_data.joblib')

# if 'data' in st.session_state:
#     data = st.session_state.data
    
# transformation du data
model.fit(data)

cluster_labels = model.labels_.astype('int64')

base_data.loc[:, 'cluster'] = cluster_labels
data_geo_assigned = base_data[base_data['cluster'] != -1]

# D√©finir le centre de la carte et le niveau de zoom pour afficher toutes les donn√©es
center_longitude = data_geo_assigned['merch_long'].mean()
center_latitude = data_geo_assigned['merch_lat'].mean()
zoom_level = 2

# Cr√©er une carte interactive avec pydeck
layer = pdk.Layer(
    'ScatterplotLayer',
    data_geo_assigned,
    get_position='[merch_long, merch_lat]',
    get_fill_color='[cluster, 0, 255, 255]',
    get_radius=20000,
    pickable=True
)

view_state = pdk.ViewState(
    longitude=center_longitude,
    latitude=center_latitude,
    zoom=zoom_level
)

# Cr√©er une carte Mapbox
map_hdb = pdk.Deck(
    layers=[layer],
    initial_view_state=view_state,
    map_style='mapbox://styles/mapbox/light-v9',
)

# Afficher la carte interactive
st.pydeck_chart(map_hdb)

# Calculer le nombre total de fraudes par cluster
fraud_count = data_geo_assigned.groupby('cluster')['is_fraud'].sum()

# Calculer le pourcentage de fraudes pour chaque cluster
fraud_percentage = data_geo_assigned.groupby('cluster')['is_fraud'].mean() * 100

# Cr√©er un DataFrame √† partir des r√©sultats pour faciliter la visualisation avec Plotly Express
fraud_data_hdb = pd.DataFrame({'Cluster': fraud_count.index, 
                            'Nombre de fraudes': fraud_count.values,
                            'Pourcentage de fraudes': fraud_percentage.values})

# Trier les donn√©es par nombre de fraudes d√©croissant
fraud_data_hdb = fraud_data_hdb.sort_values(by='Nombre de fraudes', ascending=False)

# Cr√©er l'application Streamlit
st.title('Pourcentage de fraudes par cluster (HDBSCAN)')
st.write('Visualisation du pourcentage de fraudes dans chaque cluster d√©tect√© par HDBSCAN.')

# Afficher le graphique √† barres avec Streamlit
st.bar_chart(fraud_data_hdb.set_index('Cluster')['Pourcentage de fraudes'])

# Afficher le DataFrame des donn√©es de fraude pour r√©f√©rence
st.write('Donn√©es de fraude par cluster :')
st.write(fraud_data_hdb)

