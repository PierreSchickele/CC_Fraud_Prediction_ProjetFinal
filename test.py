#Importation des librairies


import streamlit as st
import pandas as pd
import math
import matplotlib.pyplot as plt
import re
import os
import seaborn as sns
import warnings
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import numpy as np

## CONFIG
st.set_page_config(
    page_title="E-commerce",
    page_icon="üí∏",
    layout="centered"
  )


#Lecture du dataset

data = pd.read_csv("src/dfm_all.csv")


fraud_by_sector = data.groupby('job_sector')['is_fraud'].count().reset_index().sort_values(by='is_fraud', ascending=True)
st.bar_chart(data=fraud_by_sector, x='is_fraud', y='job_sector', color='is_fraud', width=1000, height=3000) #use_container_width=True)




# Viz 1 

# # Calculer la moyenne des is_fraud pour chaque genre
# fraud_by_sector = dfm_all.groupby('job_sector')['is_fraud'].count().reset_index().sort_values(by='is_fraud', ascending=True)

# # Cr√©er un graphique √† barres pour visualiser la proportion des fraudes pour chaque genre
# fig = px.bar(fraud_by_sector, x='is_fraud', y='job_sector', color = 'is_fraud',
#              labels={'job_sector': 'job sector', 'is_fraud': 'Proportion de fraudes'},
#              title='Proportion de fraudes par secteur de job')

# # Mettre √† jour la mise en page
# fig.update_layout(width=1000, height=3000)

# # Afficher le graphique
# fig.show()

# # nombre d'occurence ou j'ai 0 ou 1

# # On constate que les cat√©gories de m√©tiers plus √† risque d'√™tre victimes de fraude sont les Engineer ainsi que les officer



# viz 2


# # Calculer la moyenne des fraudes pour chaque jour de la semaine
# fraud_by_day_of_week = dfm_all.groupby('day_of_the_week')['is_fraud'].mean().reset_index()



# fig = px.bar(fraud_by_day_of_week, x='day_of_the_week', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'day_of_the_week': 'Jour de la semaine'},
#              title='Proportion de fraudes par jour de la semaine')

# # Mettre √† jour la mise en page
# fig.update_layout(width=800, height=600)

# # Afficher le graphique
# fig.show()


# viz 3

# # 3) Calculer la moyenne des fraudes pour chaque mois
# fraud_by_month = dfm_all.groupby('month')['is_fraud'].mean().reset_index()



# fig = px.bar(fraud_by_month, x='month', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'month': 'Mois'},
#              title='Proportion de fraudes par mois')

# # Mettre √† jour la mise en page
# fig.update_layout(width=800, height=600)

# # Afficher le graphique
# fig.show()


# viz 4

# # 4) Calculer la somme des fraudes pour chaque heure de la journ√©e
# fraud_by_hour = dfm_all.groupby('hour')['is_fraud'].sum().reset_index().sort_values(by='is_fraud', ascending=True)



# fig = px.bar(fraud_by_hour, x='hour', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'hour': 'Heure'},
#              title='Proportion de fraudes par heure de la journ√©e')

# # Mettre √† jour la mise en page
# fig.update_layout(width=800, height=800)

# # Afficher le graphique
# fig.show()


# viz 5

# # 5) Calculer la moyenne des fraudes pour chaque √©tat
# fraud_by_state = dfm_all.groupby('state')['is_fraud'].mean().reset_index()

# # Trier les donn√©es par ordre croissant de la proportion de fraudes
# fraud_by_state_sorted = fraud_by_state.sort_values(by='is_fraud', ascending=False)



# fig = px.bar(fraud_by_state_sorted, x='state', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'state': '√âtat'},
#              title='Proportion de fraudes par √©tat')

# # Mettre √† jour la mise en page
# fig.update_layout(width=1000, height=600)

# # Afficher le graphique
# fig.show()


# viz 6

# # 6) Cr√©er un histogramme pour chaque genre avec les donn√©es c√¥te √† c√¥te
# fig = px.histogram(dfm_all, x="gender", color="is_fraud", barmode='group',
#                    category_orders={"gender": dfm_all['gender'].value_counts().index.to_list()},
#                    labels={'is_fraud': 'Fraude', 'gender': 'Genre'},
#                    title='Distribution des fraudes par genre')

# # Ajouter les √©tiquettes de donn√©es sur chaque barre
# fig.update_traces(texttemplate='%{y}', textposition='outside')

# # Mettre √† jour la mise en page
# fig.update_layout(width=1000)

# # Afficher le graphique
# fig.show()


# viz 7


# # 7) Remplacer les valeurs 0 et 1 par des √©tiquettes
# dfm_all['is_fraud_label'] = dfm_all['is_fraud'].map({0: 'Transaction normale', 1: 'Transaction frauduleuse'})

# # Cr√©er un graphique √† dispersion avec les nouvelles √©tiquettes
# fig = px.box(dfm_all, x='amt', y='is_fraud_label')

# # Mettre √† jour la mise en page
# fig.update_layout(
#     title=go.layout.Title(text='R√©partition des montants', x=0.5),
#     showlegend=False,
#     height=700, width=1200
# )

# # Afficher le graphique
# fig.show()










# VIZUALISATION VERSION STREAMLIT


# Viz 1

# # Calculer le nombre d'occurrences de fraudes pour chaque secteur d'emploi
# fraud_by_sector = dfm_all.groupby('job_sector')['is_fraud'].count().reset_index().sort_values(by='is_fraud', ascending=True)

# # Cr√©er un graphique √† barres pour visualiser la proportion des fraudes pour chaque secteur d'emploi
# fig = px.bar(fraud_by_sector, y='job_sector', x='is_fraud', color='is_fraud',
#              labels={'job_sector': 'Secteur d\'emploi', 'is_fraud': 'Nombre d\'occurrences de fraudes'},
#              title='Nombre d\'occurrences de fraudes par secteur d\'emploi')

# # Ajouter des annotations pour indiquer les secteurs d'emploi √† risque
# fig.add_annotation(x=0, y=fraud_by_sector['job_sector'].iloc[0],
#                    text='Les m√©tiers les plus √† risque sont : Engineer et Officer',
#                    showarrow=False, font=dict(size=12, color='red'))

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)

# Viz 2


# # Calculer la moyenne des fraudes pour chaque jour de la semaine
# fraud_by_day_of_week = dfm_all.groupby('day_of_the_week')['is_fraud'].mean().reset_index()

# # Cr√©er un graphique √† barres pour visualiser la proportion des fraudes pour chaque jour de la semaine
# fig = px.bar(fraud_by_day_of_week, x='day_of_the_week', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'day_of_the_week': 'Jour de la semaine'},
#              title='Proportion de fraudes par jour de la semaine')

# # Ajouter des informations directement dans le graphique
# info_text = "Les jours avec la plus grande proportion de fraudes sont : " + ", ".join(fraud_by_day_of_week.sort_values(by='is_fraud', ascending=False)['day_of_the_week'].head(3))
# fig.add_annotation(xref='paper', yref='paper', x=0.5, y=-0.2, text=info_text, showarrow=False)

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)

# Viz 3 


# # Calculer la moyenne des fraudes pour chaque mois
# fraud_by_month = dfm_all.groupby('month')['is_fraud'].mean().reset_index()

# # Cr√©er un graphique √† barres pour visualiser la proportion des fraudes pour chaque mois
# fig = px.bar(fraud_by_month, x='month', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'month': 'Mois'},
#              title='Proportion de fraudes par mois')

# # Ajouter des informations directement dans le graphique
# info_text = "Les mois avec la plus grande proportion de fraudes sont : " + ", ".join(fraud_by_month.sort_values(by='is_fraud', ascending=False)['month'].head(3))
# fig.add_annotation(xref='paper', yref='paper', x=0.5, y=-0.2, text=info_text, showarrow=False)

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)

# Viz 4

# # Calculer la somme des fraudes pour chaque heure de la journ√©e
# fraud_by_hour = dfm_all.groupby('hour')['is_fraud'].sum().reset_index().sort_values(by='is_fraud', ascending=True)

# # Cr√©er un graphique √† barres pour visualiser la somme des fraudes pour chaque heure de la journ√©e
# fig = px.bar(fraud_by_hour, x='hour', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Somme des fraudes', 'hour': 'Heure'},
#              title='Somme des fraudes par heure de la journ√©e')

# # Ajouter des informations directement dans le graphique
# info_text = "Les heures de la journ√©e avec la plus grande somme de fraudes sont : " + ", ".join(fraud_by_hour.sort_values(by='is_fraud', ascending=False)['hour'].head(3).astype(str))
# fig.add_annotation(xref='paper', yref='paper', x=0.5, y=-0.2, text=info_text, showarrow=False)

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)

# Viz 5

# # Calculer la moyenne des fraudes pour chaque √âtat
# fraud_by_state = dfm_all.groupby('state')['is_fraud'].mean().reset_index()

# # Trier les donn√©es par ordre croissant de la proportion de fraudes
# fraud_by_state_sorted = fraud_by_state.sort_values(by='is_fraud', ascending=False)

# # Cr√©er un graphique √† barres pour visualiser la proportion des fraudes pour chaque √âtat
# fig = px.bar(fraud_by_state_sorted, x='state', y='is_fraud', color='is_fraud',
#              labels={'is_fraud': 'Proportion de fraudes', 'state': '√âtat'},
#              title='Proportion de fraudes par √©tat')

# # Ajouter des informations directement dans le graphique
# info_text = "Les √âtats avec la plus grande proportion de fraudes sont : " + ", ".join(fraud_by_state_sorted.head(3)['state'])
# fig.add_annotation(xref='paper', yref='paper', x=0.5, y=-0.2, text=info_text, showarrow=False)

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)

# Viz 6


# # Cr√©er un histogramme pour chaque genre avec les donn√©es c√¥te √† c√¥te
# fig = px.histogram(dfm_all, x="gender", color="is_fraud", barmode='group',
#                    category_orders={"gender": dfm_all['gender'].value_counts().index.to_list()},
#                    labels={'is_fraud': 'Fraude', 'gender': 'Genre'},
#                    title='Distribution des fraudes par genre')

# # Ajouter les √©tiquettes de donn√©es sur chaque barre
# fig.update_traces(texttemplate='%{y}', textposition='outside')

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)

# Viz 7


# # Remplacer les valeurs 0 et 1 par des √©tiquettes
# dfm_all['is_fraud_label'] = dfm_all['is_fraud'].map({0: 'Transaction normale', 1: 'Transaction frauduleuse'})

# # Cr√©er un graphique √† bo√Ætes avec les nouvelles √©tiquettes
# fig = px.box(dfm_all, x='amt', y='is_fraud_label')

# # Mettre √† jour la mise en page
# fig.update_layout(
#     title='R√©partition des montants',
#     showlegend=False,
#     height=700, width=1200
# )

# # Afficher le graphique dans Streamlit
# st.plotly_chart(fig, use_container_width=True)
